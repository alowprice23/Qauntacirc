[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quantacirc"
version = "1.0.0"
description = "Physics-based agentic software engineering system with mathematical guarantees"
authors = [{name = "QuantaCirc Team", email = "team@quantacirc.dev"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
keywords = ["agentic", "llm", "physics", "software-engineering", "quantum", "mathematics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
]

dependencies = [
    # Core dependencies
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # LLM providers
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "groq>=0.4.0",
    "google-generativeai>=0.3.0",
    
    # Mathematical libraries
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "networkx>=3.0",
    "sympy>=1.12",
    
    # Data handling
    "sqlite-utils>=3.35.0",
    "pandas>=2.0.0",
    "pyyaml>=6.0",
    "jsonschema>=4.17.0",
    
    # Async and messaging
    "asyncio-nats-client>=2.5.0",
    "aiofiles>=23.0.0",
    
    # Utilities
    "click>=8.0.0",
    "httpx>=0.24.0",
    "jinja2>=3.1.0",
    "structlog>=23.0.0",
    
    # Git integration
    "gitpython>=3.1.0",
    
    # Compression (for Kolmogorov approximation)
    "zstandard>=0.21.0",
    
    # Hashing and cryptography
    "cryptography>=41.0.0",
    "blake3>=0.3.0",
    
    # Performance monitoring
    "psutil>=5.9.0",
    "prometheus-client>=0.16.0",
    
    # Code analysis
    "ast-decompiler>=2.0.0",
    "astor>=0.8.1",
    
    # Testing framework integration
    "pytest>=7.4.0",
    "hypothesis>=6.82.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "ruff>=0.0.284",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
]

formal = [
    # Formal verification tools (optional)
    "z3-solver>=4.12.0",
    "cvc5>=1.0.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "mkdocstrings>=0.22.0",
    "mkdocs-jupyter>=0.24.0",
]

monitoring = [
    "prometheus-client>=0.16.0",
    "opentelemetry-api>=1.17.0",
    "opentelemetry-sdk>=1.17.0",
    "opentelemetry-instrumentation>=0.38b0",
    "grafana-client>=3.5.0",
]

deployment = [
    "docker>=6.1.0",
    "kubernetes>=26.1.0",
    "helm>=3.12.0",
    "terraform>=1.5.0",
]

[project.scripts]
qcli = "cli.main:app"
quantacirc = "cli.main:app"

[project.urls]
Homepage = "https://github.com/quantacirc/quantacirc"
Documentation = "https://docs.quantacirc.dev"
Repository = "https://github.com/quantacirc/quantacirc"
"Bug Tracker" = "https://github.com/quantacirc/quantacirc/issues"
"Discussions" = "https://github.com/quantacirc/quantacirc/discussions"

[tool.setuptools.packages.find]
include = ["cli*", "core*", "agents*", "llm*", "math*", "messaging*", "artifacts*", "monitoring*", "proofs*", "tools*", "memory*", "adapters*"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
skip-string-normalization = true

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "--cov=. --cov-report=term-missing --cov-report=html --cov-fail-under=85"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
    "property: marks tests as property-based tests",
    "agent: marks tests specific to agents",
    "llm: marks tests requiring LLM providers",
    "formal: marks tests requiring formal verification tools",
]

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/.venv/*",
    "*/venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["version.py:__version__"]
build_command = "pip install build && python -m build"
